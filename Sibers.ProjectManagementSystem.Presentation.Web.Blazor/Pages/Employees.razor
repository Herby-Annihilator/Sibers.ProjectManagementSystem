@page "/employees"
@using Sibers.ProjectManagementSystem.Data.Entities
@using Sibers.ProjectManagementSystem.Data.Repositories.Base
@using Sibers.ProjectManagementSystem.Presentation.Web.Blazor.Dialogs
@using Sibers.ProjectManagementSystem.Presentation.Web.Blazor.Infrastructure.Commands
@using Sibers.ProjectManagementSystem.Presentation.Web.Blazor.Infrastructure.Commands.Base

@inject IDialogService DialogService
@inject ICrudRepository<Employee> EmployeeRepository

<PageTitle>Все сотрудники компании</PageTitle>
<MudFab Style="position:fixed; bottom:10px; right:10px;" Color="Color.Success"
    StartIcon="@Icons.Material.Filled.Add" @onclick="OnEmployeeCreate"/>
<MudText Typo="Typo.h3" GutterBottom="true">Все сотрудники компании</MudText>

@if (_employeesList == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudTable Style="height:stretch;" Items="_employeesList" FixedHeader="true" FixedFooter="true" Hover="true" SortLabel="Sort by">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Employee, object>(e => e.Id)">
                Id
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Employee, object>(e => e.FirstName)">
                Фамилия
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Employee, object>(e => e.LastName)">
                Имя
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Employee, object>(e => e.Patronymic)">
                Отчество
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="new Func<Employee, object>(e => e.Email)">
                Email
            </MudTableSortLabel>
        </MudTh>
        <MudTh>
            Действие
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="Patronymic">@context.Patronymic</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd>
            <MudIconButton Color="Color.Info" Variant="Variant.Filled" Icon="@Icons.Filled.RemoveRedEye" @onclick="@(() => OnEmployeeWatch(context))">
            </MudIconButton>
            <MudIconButton Color="Color.Success" Variant="Variant.Filled" Icon="@Icons.Filled.Edit" @onclick="OnEmployeeEdit">
            </MudIconButton>
            <MudIconButton Color="Color.Error" Variant="Variant.Filled" Icon="@Icons.Filled.Delete" @onclick="@(() => OnEmployeeDelete(context))">
            </MudIconButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }"/>
    </PagerContent>
</MudTable>
}

@code {
    private ICollection<Employee> _employeesList;

    protected override async Task OnInitializedAsync()
    {
        _employeesList = (ICollection<Employee>)await EmployeeRepository.GetAllAsync(); 
    }

    private void OnEmployeeEdit()
    {
        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
        var dialog = DialogService.Show<EmployeeManagementDialog>("Управление сотрудником", options);
    }

    private void OnEmployeeWatch(Employee employee)
    {
        ICommand watchCommand = new ShowWatchEmployeeDialogCommand(DialogService);
        watchCommand.Execute(employee);
    }

    private async Task OnEmployeeCreate()
    {
        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
        var dialog = DialogService.Show<CreateEmployeeDialog>("Создание сотрудника", options);
        using var task = dialog.Result;
        var result = await task;
        if (!result.Cancelled)
        {
            if (result.Data is Employee employee)
            {
                await EmployeeRepository.AddEntityAsync(employee);
                _employeesList.Add(employee);

            }
        }
    }

    private async Task OnEmployeeDelete(Employee employee)
    {
        bool? result = await DialogService.ShowMessageBox(
            title: $"Удаление сотрудника '{employee.FirstName} {employee.LastName} {employee.Patronymic}'",
            markupMessage: new MarkupString("Вы действительно хотите удалить сотрудника? Действие невозможно будет отменить"),
            yesText: "Удалить",
            cancelText: "Отмена"
        );
        if (result != null && result == true)
        {
            _employeesList.Remove(employee);
            await EmployeeRepository.DeleteEntityAsync(employee.Id);
        }
    }
}
