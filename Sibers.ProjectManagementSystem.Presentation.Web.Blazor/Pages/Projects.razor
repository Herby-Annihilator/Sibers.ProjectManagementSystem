@page "/projects"
@using Sibers.ProjectManagementSystem.Data.Entities
@using Sibers.ProjectManagementSystem.Data.Repositories.Base
@using Sibers.ProjectManagementSystem.Presentation.Web.Blazor.Dialogs

@inject IDialogService DialogService
@inject ICrudRepository<Project> ProjectsRepository

@if (_projects == null)
{
    <MudProgressCircular Color="Color.Default" Indeterminate="true" />
}
else
{
    <MudFab Style="position:fixed; bottom:10px; right:10px;" Color="Color.Success"
        StartIcon="@Icons.Material.Filled.Add" @onclick="OnCreateProject"/>
    <MudText Typo="Typo.h3" GutterBottom="true">Проекты</MudText>
    @if (_projects.Count() == 0)
    {
        <MudText Typo="Typo.h5" GutterBottom="true">Здесь ничего нет</MudText>
    }
    else
    {
        <MudTable Style="height:stretch;" Items="_projects" FixedHeader="true" FixedFooter="true" Hover="true" SortLabel="Sort by">
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Project, object>(e => e.Id)">
                        Id
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Project, object>(e => e.Name)">
                        Название проекта
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Project, object>(e => e.NameOfCustomerCompany)">
                        Компания-заказчик
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Project, object>(e => e.NameOfContractorCompany)">
                        Компания-исполнитель
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Project, object>(e => e.StartDate)">
                        Дата начала проекта
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Project, object>(e => e.EndDate)">
                        Дата окончания проекта
                    </MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel SortBy="new Func<Project, object>(e => e.Priority)">
                        Приоритет
                    </MudTableSortLabel>
                </MudTh>
                <MudTh Style="width:200px;">
                    Действие
                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Id</MudTd>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.NameOfCustomerCompany</MudTd>
                <MudTd>@context.NameOfContractorCompany</MudTd>
                <MudTd>@context.StartDate</MudTd>
                <MudTd>@context.EndDate</MudTd>
                <MudTd>@context.Priority</MudTd>
                <MudTd>
                    <MudIconButton Color="Color.Info" Variant="Variant.Filled" Icon="@Icons.Filled.RemoveRedEye" @onclick="@(() => OnWatchProject(context.Id))">
                    </MudIconButton>
                    <MudIconButton Color="Color.Success" Variant="Variant.Filled" Icon="@Icons.Filled.Edit" @onclick="@(() => OnProjectEdit(context.Id))">
                    </MudIconButton>
                    <MudIconButton Color="Color.Error" Variant="Variant.Filled" Icon="@Icons.Filled.Delete" @onclick="@(() => OnProjectDeleting(context.Id))">
                    </MudIconButton>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }"/>
            </PagerContent>
        </MudTable>
    }   
}


@code {
    private ICollection<Project> _projects;

    protected override async Task OnInitializedAsync()
    {
        await FillProjects();
    }

    private async Task FillProjects()
    {
        _projects = (ICollection<Project>)await ProjectsRepository.GetAllAsync();
    }

    private void OnCreateProject()
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Large,
                FullWidth = true
            };
        var dialog = DialogService.Show<CreateProjectDialog>("Создание проекта", options);
    }

    private async Task OnWatchProject(int projectId)
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Large,
                FullWidth = true
            };
        Project project = await ProjectsRepository.GetByIdAsync(projectId);
        DialogParameters parameters = new DialogParameters();
        parameters.Add("project", project);
        var dialog = DialogService.Show<WatchProjectDialog>("Информация о проекте", parameters, options);
    }

    private async void OnProjectDeleting(int projectId)
    {
        bool? result = await DialogService.ShowMessageBox(
            title: $"Удаление проекта {projectId}",
            markupMessage: new MarkupString("Вы действительно хотите удалить проект? Действие невозможно будет отменить"),
            yesText: "Удалить",
            cancelText: "Отмена"
        );
        if (result != null && result == true)
        {
            await ProjectsRepository.DeleteEntityAsync(projectId);
            _projects.Remove(_projects.First(p => p.Id == projectId));
        }
    }

    protected void OnProjectEdit(int projectId)
    {
        var options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Large,
                FullWidth = true
            };
        Project project = ProjectsRepository.GetById(projectId);
        DialogParameters parameters = new DialogParameters();
        parameters.Add("project", project);
        var dialog = DialogService.Show<ProjectManagementDialog>("Управление проектом", parameters, options);

        _projects.Remove(project);
        _projects.Add(project);
    }
}
