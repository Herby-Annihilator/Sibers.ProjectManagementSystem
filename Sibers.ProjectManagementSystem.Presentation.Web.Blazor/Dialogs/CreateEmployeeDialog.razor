@using Sibers.ProjectManagementSystem.Data.Entities
@using Sibers.ProjectManagementSystem.Data.Repositories.Base
@inject IDialogService DialogService
@inject ICrudRepository<Project> ProjectRepository
@inject ICrudRepository<Employee> EmployeeRepository
@inject ICrudRepository<RoleInProject> RoleInProjectRepository

<MudDialog>
    <DialogContent>
        <MudContainer>
            @if (_employee == null)
            {
                <MudProgressCircular Indeterminate="true"></MudProgressCircular>
            }
            else
            {
                <EditForm Model="@_employee">
                    <MudText GutterBottom="true" Typo="Typo.h5">Общая информация</MudText>
                        <MudTextField Class="mb-3" Label="Фамилия" @bind-Value="_employee.FirstName" Required="true" 
                            RequiredError="Это обязательное поле!"/>
                        <MudTextField Class="mb-3" Label="Имя" @bind-Value="_employee.LastName" Required="true" 
                            RequiredError="Это обязательное поле!"/>
                        <MudTextField Class="mb-3" Label="Отчество" @bind-Value="_employee.Patronymic" Required="true" 
                            RequiredError="Это обязательное поле!"/>
                        <MudTextField Class="mb-3" Label="Email" @bind-Value="_employee.Email" Required="true" 
                            RequiredError="Это обязательное поле!"/>
                        <MudDivider/>
                        <MudText Typo="Typo.h5" GutterBottom="true" Class="mt-5">
                            Задействован на проектах
                        </MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Success" Class="mt-3 mb-3" @onclick="OnProjectSelecting">
                            Добавить на проект
                        </MudButton>
                        @if (_employee.EmployeesInProject == null)
                        {
                            <MudProgressCircular Indeterminate="true"></MudProgressCircular>
                        }
                        else
                        {
                            <MudTable Items="_employee.EmployeesInProject" Hover="true">
                                <HeaderContent>
                                    <MudTh>
                                        Название проекта
                                    </MudTh>
                                    <MudTh>
                                        Роль на проекте
                                    </MudTh>
                                    <MudTh>
                                        Действие
                                    </MudTh>
                                </HeaderContent>
                                <RowTemplate Context="ep">
                                    <MudTd DataLabel="Название проекта">@ep.Project.Name</MudTd>
                                    <MudTd DataLabel="Роль на проекте">@ep.RoleInProject.Name</MudTd>
                                    <MudTd DataLabel="Действие">
                                        <MudButton Color="Color.Tertiary" Variant="Variant.Filled" @onclick="@(() => OnChangeEmployeesRole(ep.Project))">
                                            Изменить роль
                                        </MudButton>
                                        <MudButton Color="Color.Error" Variant="Variant.Filled" @onclick="@(() => OnRemovingEmployeeFromProject(@ep.Project.Id))">
                                            Снять с проекта
                                        </MudButton>
                                    </MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager PageSizeOptions="new int[] { 5, 10, 15}"/>
                                </PagerContent>
                            </MudTable>
                        }
                    </EditForm>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отмена</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">Принять</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private bool Loading { get; set; }
    private RoleInProject _employeeRole;
    private RoleInProject _managerRole;

    protected override async Task OnInitializedAsync()
    {
        IEnumerable<RoleInProject> roles = await RoleInProjectRepository.GetAllAsync();
        _employeeRole = roles.FirstOrDefault(r => r.Name.ToLower() == "сотрудник");
        _managerRole = roles.FirstOrDefault(r => r.Name.ToLower() == "руководитель");
    }

    private async Task OnChangeEmployeesRole(Project project)
    {
        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
        DialogParameters parameters = new DialogParameters();
        parameters.Add("Project", project);
        parameters.Add("Employee", _employee);
        var dialog = DialogService.Show<ChangeEmployeesRoleDialog>("Изменение роли сотрудника", options);
        using var task = dialog.Result;
        var result = await task;
        if (!result.Cancelled)
        {
            if (result.Data is RoleInProject role)
            {
                _employee.EmployeesInProject.Remove(_employee.EmployeesInProject.First(ep => ep.Employee.Id == _employee.Id && ep.Project.Id == project.Id));
                _employee.EmployeesInProject.Add(new EmployeeInProject
                {
                    Project = project,
                    Employee = _employee,
                    RoleInProject = role
                });
            }
        }
    }

    private async void OnProjectSelecting()
    {
        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Large,
                FullWidth = true
            };
        DialogParameters parameters = new DialogParameters();
        parameters.Add("Multiselection", true);
        parameters.Add("ExcludedProjects", new List<Project>());
        var dialog = DialogService.Show<SelectProjectDialog>("Выбор проектов для сотрудника", parameters, options);
        var task = dialog.Result;
        var result = await task;
        if (!result.Cancelled)
        {
            if (result.Data is ICollection<Project> projects)
            {
                foreach (var item in projects)
                {
                    _employee.EmployeesInProject.Add(new EmployeeInProject
                    {
                        Employee = _employee,
                        Project = item,
                        RoleInProject = _employeeRole
                    });
                }
            }
        }
    }

    private async Task OnRemovingEmployeeFromProject(int projectId)
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Снять сотрудника",
            markupMessage: new MarkupString("Снять сотрудника? Это действие нельзя будет отменить"),
            yesText: "Снять",
            cancelText: "Отмена"
        );
        if (result != null && result == true)
        {
            // this employee instance is not in database yet
            _employee.EmployeesInProject.Remove(_employee.EmployeesInProject.First(ep => ep.Project.Id == projectId));
        }
    }

    private Employee _employee = new Employee
        {
            FirstName = "",
            LastName = "",
            Patronymic = "",
            Email = "",
            Id = 0,
            EmployeesInProject = new List<EmployeeInProject>()
        };

    async Task Submit()
    {
        var result = await EmployeeRepository.AddEntityAsync(_employee);
        if (result == default)
            MudDialog.Close(DialogResult.Ok(false));
        MudDialog.Close(DialogResult.Ok(true));
    }
    void Cancel() => MudDialog.Cancel();
}
