@using Sibers.ProjectManagementSystem.Data.DTOs
@using Sibers.ProjectManagementSystem.Data.Entities
@using Sibers.ProjectManagementSystem.Data.Repositories.Base
@using Sibers.ProjectManagementSystem.Services.WebApiClients.Base
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IClient<ProjectDto> ProjectWebService
@inject IClient<EmployeeDto> EmployeeWebService
@inject IClient<RoleInProjectDto> RoleInProjectWebService

<MudDialog>
    <DialogContent>
        <MudContainer>
            @if (_employee == null)
            {
                <MudProgressCircular Indeterminate="true"></MudProgressCircular>
            }
            else
            {
                <EditForm Model="@_employee">
                    <MudText GutterBottom="true" Typo="Typo.h5">Общая информация</MudText>
                        <MudTextField Class="mb-3" Label="Фамилия" @bind-Value="_employee.FirstName" Required="true" 
                            RequiredError="Это обязательное поле!"/>
                        <MudTextField Class="mb-3" Label="Имя" @bind-Value="_employee.LastName" Required="true" 
                            RequiredError="Это обязательное поле!"/>
                        <MudTextField Class="mb-3" Label="Отчество" @bind-Value="_employee.Patronymic" Required="true" 
                            RequiredError="Это обязательное поле!"/>
                        <MudTextField Class="mb-3" Label="Email" @bind-Value="_employee.Email" Required="true" 
                            RequiredError="Это обязательное поле!"/>
                        <MudDivider/>
                        <MudText Typo="Typo.h5" GutterBottom="true" Class="mt-5">
                            Задействован на проектах
                        </MudText>
                        <MudButton Variant="Variant.Filled" Color="Color.Success" Class="mt-3 mb-3" @onclick="OnProjectSelecting">
                            Добавить на проект
                        </MudButton>
                        @if (_employee.ProjectRoleDtos == null)
                        {
                            <MudProgressCircular Indeterminate="true"></MudProgressCircular>
                        }
                        else
                        {
                            <MudTable Items="_employee.ProjectRoleDtos" Hover="true">
                                <HeaderContent>
                                    <MudTh>
                                        Название проекта
                                    </MudTh>
                                    <MudTh>
                                        Роль на проекте
                                    </MudTh>
                                    <MudTh>
                                        Действие
                                    </MudTh>
                                </HeaderContent>
                                <RowTemplate Context="ep">
                                    <MudTd DataLabel="Название проекта">@ep.ProjectName</MudTd>
                                    <MudTd DataLabel="Роль на проекте">@ep.RoleName</MudTd>
                                    <MudTd DataLabel="Действие">
                                        <MudButton Color="Color.Tertiary" Variant="Variant.Filled" @onclick="@(() => OnChangeEmployeesRole(@ep.ProjectId))">
                                            Изменить роль
                                        </MudButton>
                                        <MudButton Color="Color.Error" Variant="Variant.Filled" @onclick="@(() => OnRemovingEmployeeFromProject(@ep.ProjectId))">
                                            Снять с проекта
                                        </MudButton>
                                    </MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager PageSizeOptions="new int[] { 5, 10, 15}"/>
                                </PagerContent>
                            </MudTable>
                        }
                    </EditForm>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Отмена</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Submit">Принять</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    private RoleInProjectDto _employeeRole;
    private RoleInProjectDto _managerRole;

    private EmployeeDto _employee = new EmployeeDto
        {
            FirstName = "",
            LastName = "",
            Patronymic = "",
            Email = "",
            Id = 0,
            ProjectRoleDtos = new List<ProjectRoleDto>()
        };

    protected override async Task OnInitializedAsync()
    {
        IEnumerable<RoleInProjectDto> roles = await RoleInProjectWebService.GetAllAsync();
        _employeeRole = roles.FirstOrDefault(r => r.Name.ToLower() == "сотрудник");
        _managerRole = roles.FirstOrDefault(r => r.Name.ToLower() == "руководитель");
    }

    private async Task OnChangeEmployeesRole(int projectId)
    {
        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
        DialogParameters parameters = new DialogParameters();
        ProjectDto project = await ProjectWebService.GetEntityByIdAsync(projectId);
        parameters.Add("Project", project);
        parameters.Add("Employee", _employee);
        var dialog = DialogService.Show<ChangeEmployeesRoleDialog>("Изменение роли сотрудника", parameters, options);
        using var task = dialog.Result;
        var result = await task;
        if (!result.Cancelled)
        {
            if (result.Data is RoleInProjectDto role)
            {
                _employee.ProjectRoleDtos.Remove(_employee.ProjectRoleDtos.First(ep => ep.ProjectId == project.Id));
                _employee.ProjectRoleDtos.Add(new ProjectRoleDto
                {
                    ProjectId = project.Id,
                    ProjectName = project.Name,
                    RoleId = role.Id,
                    RoleName = role.Name
                });
                Snackbar.Add("Роль изменена", Severity.Success);
            }
        }
    }

    private async void OnProjectSelecting()
    {
        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Large,
                FullWidth = true
            };
        DialogParameters parameters = new DialogParameters();
        parameters.Add("Multiselection", true);
        parameters.Add("ExcludedProjects", await GetExludedProjects());
        var dialog = DialogService.Show<SelectProjectDialog>("Выбор проектов для сотрудника", parameters, options);
        using var task = dialog.Result;
        var result = await task;
        if (!result.Cancelled)
        {
            if (result.Data is ICollection<ProjectDto> projects)
            {
                foreach (var dto in projects)
                {
                    _employee.ProjectRoleDtos.Add(new ProjectRoleDto
                    {
                        ProjectId = dto.Id,
                        ProjectName = dto.Name,
                        RoleId = dto.Manager == null ? _employeeRole.Id : _employeeRole.Id,
                        RoleName = dto.Manager == null ? _employeeRole.Name : _managerRole.Name
                    });
                }
                Snackbar.Add("Для сотрудника были выбраны проекты", Severity.Success);
            }
            else
            {
                Snackbar.Add("result.Data is not an ICollection<ProjectDto>", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Проекты не выбраны", Severity.Warning);
        }
    }

    private async Task<List<ProjectDto>> GetExludedProjects()
    {
        List<ProjectDto> projects = new List<ProjectDto>();
        foreach (var item in _employee.ProjectRoleDtos)
        {
            projects.Add(await ProjectWebService.GetEntityByIdAsync(item.ProjectId));
        }
        return projects;
    }

    private async Task OnRemovingEmployeeFromProject(int projectId)
    {
        bool? result = await DialogService.ShowMessageBox(
            title: "Снять сотрудника",
            markupMessage: new MarkupString("Снять сотрудника? Это действие нельзя будет отменить"),
            yesText: "Снять",
            cancelText: "Отмена"
        );
        if (result != null && result == true)
        {
            // this employee instance is not in database yet
            var employeeInProject = _employee.ProjectRoleDtos.First(ep => ep.ProjectId == projectId);
            _employee.ProjectRoleDtos.Remove(employeeInProject);
            Snackbar.Add($"Сотрудник снят с проекта {employeeInProject.ProjectName}", Severity.Success);
        }
    }

    

    async Task Submit()
    {
        var result = await EmployeeWebService.AddEntityAsync(_employee);
        if (result == default)
        {
            Snackbar.Add("Сотрудник не был создан", Severity.Error);
            MudDialog.Close(DialogResult.Ok(false));
        }
        else
        {
            Snackbar.Add("Сотрудник создан", Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
        }
        
    }
    void Cancel() => MudDialog.Cancel();
}
