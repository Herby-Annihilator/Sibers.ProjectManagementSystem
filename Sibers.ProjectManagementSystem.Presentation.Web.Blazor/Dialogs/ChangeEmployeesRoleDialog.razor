@using Sibers.ProjectManagementSystem.Data.Entities
@using Sibers.ProjectManagementSystem.Data.Repositories.Base
@inject ICrudRepository<RoleInProject> RoleInProjectRepository

<MudDialog>
    <DialogContent>
        <MudText GutterBottom="true" Typo="Typo.h4" Align="Align.Center">@Project.Name</MudText>
        <MudDivider/>
        <MudText Class="mt-5" GutterBottom="true" Typo="Typo.h6">ФИО сотрудника</MudText>
        <MudText>@Employee.FirstName @Employee.LastName @Employee.Patronymic</MudText>
        <MudSelect @bind-Value="@_selectedRole" ToStringFunc="@converter" Label="Роль на проекте" AnchorOrigin="Origin.BottomCenter">
            @if (_rolesInProject != null)
            {
                @foreach (var item in _rolesInProject)
                {
                    <MudSelectItem Value="@item"/>
                }
            }
        </MudSelect>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Default" OnClick="Cancel">Отмена</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Принять</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _rolesInProject = await RoleInProjectRepository.GetAllAsync();
        if (_rolesInProject == null)
            _rolesInProject = new List<RoleInProject>();
    }

    private IEnumerable<RoleInProject> _rolesInProject;

    private RoleInProject _selectedRole = new RoleInProject();
    // This property dialog will get from parameters
    [Parameter]
    public Project Project { get; set; }
    // This property dialog will get from parameters
    [Parameter]
    public Employee Employee { get; set; }

    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(_selectedRole));
    }
    void Cancel() => MudDialog.Cancel();

    Func<RoleInProject, string> converter = role => role.Name;
}