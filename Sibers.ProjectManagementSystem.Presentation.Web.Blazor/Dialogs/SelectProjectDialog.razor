@using Sibers.ProjectManagementSystem.Data.DTOs
@using Sibers.ProjectManagementSystem.Data.Entities
@using Sibers.ProjectManagementSystem.Data.Repositories.Base
@using Sibers.ProjectManagementSystem.Services.WebApiClients.Base
@inject IClient<ProjectDto> ProjectWebService

<MudDialog>
    <DialogContent>
        <MudContainer>
            @if (_projectsList == null)
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }
            else
            {
                @if (Multiselection == false)
                {
                    <MudText GutterBottom="true" Typo="Typo.h4">
                        Выбранный проект
                    </MudText>
                    <MudText GutterBottom="true">@_selectedProject?.Name</MudText>
                }
                <MudTable Style="height:stretch;" Items="_projectsList" FixedHeader="true" FixedFooter="true" 
                    Hover="true" SortLabel="Sort by" MultiSelection="@Multiselection" 
                    @bind-SelectedItems="_selectedProjects" @bind-SelectedItem="_selectedProject">
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProjectDto, object>(e => e.Id)">
                            Id
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProjectDto, object>(e => e.Name)">
                            Название
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProjectDto, object>(e => e.StartDate)">
                            Дата начала
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProjectDto, object>(e => e.EndDate)">
                            Дата окончания
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProjectDto, object>(e => e.NameOfCustomerCompany)">
                            Компания-заказчик
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProjectDto, object>(e => e.NameOfContractorCompany)">
                            Компания-исполнитель
                        </MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ProjectDto, object>(e => e.Priority)">
                            Приоритет
                        </MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <RowTemplate Context="pr">
                    <MudTd DataLabel="Id">@pr.Id</MudTd>
                    <MudTd DataLabel="Name">@pr.Name</MudTd>
                    <MudTd DataLabel="StartDate">@pr.StartDate</MudTd>
                    <MudTd DataLabel="EndDate">@pr.EndDate</MudTd>
                    <MudTd DataLabel="NameOfCustomerCompany">@pr.NameOfCustomerCompany</MudTd>
                    <MudTd DataLabel="NameOfContractorCompany">@pr.NameOfContractorCompany</MudTd>
                    <MudTd DataLabel="Priority">@pr.Priority</MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }"/>
                </PagerContent>
            </MudTable>
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Submit">Выбрать</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private ICollection<ProjectDto> _projectsList;
    private HashSet<ProjectDto> _selectedProjects = new HashSet<ProjectDto>();
    /// <summary>
    /// Indicates the need for multiple project selection
    /// </summary>
    [Parameter]
    public bool Multiselection { get; set; }
    /// <summary>
    /// Projects that need to be excluded from the final sample
    /// </summary>
    [Parameter]
    public ICollection<ProjectDto> ExcludedProjects { get; set; }

    private ProjectDto _selectedProject;

    protected override async Task OnInitializedAsync()
    {
        _projectsList = await ProjectWebService.GetAllAsync();
        foreach (var item in ExcludedProjects)
        {
            _projectsList.Remove(item);
        }
    }

    private void Submit()
    {
        if (Multiselection)
        {
            MudDialog.Close(DialogResult.Ok(_selectedProjects));
        }
        else
        {
            MudDialog.Close(DialogResult.Ok(_selectedProject));
        }
    }
}
