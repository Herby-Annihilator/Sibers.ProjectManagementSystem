@using Sibers.ProjectManagementSystem.Data.Entities
@using Sibers.ProjectManagementSystem.Data.Repositories.Base
@inject IDialogService DialogService
@inject ICrudRepository<Project> ProjectRepository

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="max-height: 700px; overflow-y: scroll">
            @if (Project == null)
            {
                <MudProgressCircular Indeterminate="true"></MudProgressCircular>
            }
            else
            {
                <MudText GutterBottom="true" Typo="Typo.h4" Align="Align.Center">@Project.Name (приоритет @Project.Priority)</MudText>
                <MudDivider Class="mb-4 mt-2"/>
                <MudGrid>
                    <MudItem xs="3">
                        <MudText>Заказчик</MudText>
                        <MudText Typo="Typo.h5">@Project.NameOfCustomerCompany</MudText>
                    </MudItem>
                    <MudItem xs="3">
                        <MudText>Разработчик</MudText>
                        <MudText Typo="Typo.h5">@Project.NameOfContractorCompany</MudText>
                    </MudItem>
                    <MudItem xs="3">
                        <MudText>Дата начала</MudText>
                        <MudText Typo="Typo.h5">@DateFormat(Project.StartDate)</MudText>
                    </MudItem>
                    <MudItem xs="3">
                        <MudText>Дата окончания</MudText>
                        <MudText Typo="Typo.h5">@DateFormat(Project.EndDate)</MudText>
                    </MudItem>
                </MudGrid>
                <MudText GutterBottom="true" Typo="Typo.h5" Class="mt-5">Руководитель</MudText>
                <MudText>
                    @_managerFullName <MudIconButton Color="Color.Dark" Variant="Variant.Text" Icon="@Icons.Filled.RemoveRedEye" @onclick="OnEmployeeWatch"/>
                </MudText>
                
                <MudDivider Class="mb-5"/>
                <MudText GutterBottom="true" Typo="Typo.h5">Сотрудники на проекте</MudText>
                @if (_employees == null)
                {
                    <MudProgressCircular Indeterminate="true"></MudProgressCircular>
                }
                else
                {
                    <MudTable Items="_employees" FixedHeader="true" FixedFooter="true" Hover="true" SortLabel="Sort by">
                                <HeaderContent>
                                    <MudTh>
                                        <MudTableSortLabel SortBy="new Func<Employee, object>(e => e.Id)">
                                            Id
                                        </MudTableSortLabel>
                                    </MudTh>
                                    <MudTh>
                                        <MudTableSortLabel SortBy="new Func<Employee, object>(e => e.FirstName)">
                                            Фамилия
                                        </MudTableSortLabel>
                                    </MudTh>
                                    <MudTh>
                                        <MudTableSortLabel SortBy="new Func<Employee, object>(e => e.LastName)">
                                            Имя
                                        </MudTableSortLabel>
                                    </MudTh>
                                    <MudTh>
                                        <MudTableSortLabel SortBy="new Func<Employee, object>(e => e.Patronymic)">
                                            Отчество
                                        </MudTableSortLabel>
                                    </MudTh>
                                    <MudTh>
                                        <MudTableSortLabel SortBy="new Func<Employee, object>(e => e.Email)">
                                            Email
                                        </MudTableSortLabel>
                                    </MudTh>
                                </HeaderContent>
                                <RowTemplate Context="emp">
                                    <MudTd DataLabel="Id">@emp.Id</MudTd>
                                    <MudTd DataLabel="FirstName">@emp.FirstName</MudTd>
                                    <MudTd DataLabel="LastName">@emp.LastName</MudTd>
                                    <MudTd DataLabel="Patronymic">@emp.Patronymic</MudTd>
                                    <MudTd DataLabel="Email">@emp.Email</MudTd>
                                </RowTemplate>
                                <PagerContent>
                                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }"/>
                                </PagerContent>
                            </MudTable>
                }
            }
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Ok">Назад</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private string DateFormat(DateTime date) => $"{date.Day}.{date.Month}.{date.Year}";

    private IEnumerable<Employee> _employees;
    private Employee _manager = new Employee()
        {
            FirstName = "Иванов",
            LastName = "Иван",
            Patronymic = "Петрович"
        };
    private string _managerFullName;

    private Project project = new Project
        {
            Id = 10,
            Name = "Test task",
            NameOfContractorCompany = "Microsoft",
            NameOfCustomerCompany = "Oracle",
            Priority = 1000,
            StartDate = new DateTime(2022, 1, 1),
            EndDate = new DateTime(2022, 12, 31),
        };

    [Parameter]
    public Project Project { get; set; }

    private bool _loading = false;
    private DateTime? _projectStartDate;
    private DateTime? _projectEndDate;

    private void OnEmployeeWatch()
    {
        DialogOptions options = new DialogOptions
            {
                CloseButton = true,
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
        var dialog = DialogService.Show<WatchEmployeeDialog>("Просмотр сотрудника", options);
    }

    protected override async Task OnInitializedAsync()
    {
        _managerFullName = $"{_manager.FirstName} {_manager.LastName} {_manager.Patronymic}";
        await GetEmployees();
    }

    void Ok() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    private Task GetEmployees()
    {
        return Task.Factory.StartNew(() =>
        {
            int employeesCount = 33;
            int id;
            Employee[] employees = new Employee[employeesCount];
            for (int i = 0; i < employeesCount; i++)
            {
                id = i + 1;
                employees[i] = new Employee
                {
                    Id = id,
                    FirstName = $"EmployeeFirstName_{id}",
                    LastName = $"EmployeeLastName_{id}",
                    Patronymic = $"EmployeePatronymic_{id}",
                    Email = $"employee_{id}_@gmail.com"
                };
            }
            _employees = employees;
        });
    }
}
